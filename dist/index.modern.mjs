import t from"isomorphic-unfetch";import{v4 as e}from"uuid";function i(){return i=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)({}).hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t},i.apply(null,arguments)}class n{constructor(t){this.apiKey=void 0,this.baseUrl=void 0,this.apiKey=t.apiKey,this.baseUrl=t.baseUrl||"https://api.ramp.com/developer/v1/"}invoke(e,n){const o=`${this.baseUrl}${e}`,s=i({},n,{headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`,Accept:"application/json"}});return t(o,s).then(t=>(console.log(t.body),t.json()))}}function o(t){const e=new URLSearchParams;for(const i in t)if(t.hasOwnProperty(i)){const n=t[i];null!=n&&(Array.isArray(n)?n.forEach(t=>e.append(i,n.toString())):e.append(i,n.toString()))}return e.toString()}class s extends n{}var r;r=s,[class extends n{getBills(t){return this.invoke("bills",t)}getBillById(t){return this.invoke(`bills/${t}`)}},class extends n{getAccountingOptions(t,e,i,n){const s=o({field_id:t,page_size:i,start:e,is_active:n});return this.invoke("accounting/field-options?"+s)}postNewAccountingFieldOptions(t){const i=e(),n={method:"POST",body:JSON.stringify({field_id:i,options:t})};return this.invoke("accounting/field-options",n)}getCustomAccountingOption(t){return this.invoke(`accounting/field-options/${t}`)}updateCustomAccountingOption(t,e,i){const n={method:"PATCH",body:JSON.stringify({reactivate:e,value:i})};return this.invoke(`accounting/field-options/${t}`,n)}deleteCustomAccountingFieldOption(t){return this.invoke(`accounting/field-options/${t}`)}listCustomAccountingFields(t,e,i){const n=o({start:t,page_size:e,is_active:i});return this.invoke(`accounting/fields?${n}`)}createCustomAccountingField(t,e,i,n){if("BOOLEAN"!==e||"FREE_FORM_TEXT"!==e||"SINGLE_CHOICE"!==e)throw new Error("The input type can only be SINGLE_CHOICE, BOOLEAN or FREE_FORM_TEXT.");const o={method:"POST",body:JSON.stringify({id:t,input_type:e,name:i,is_splittable:n})};return this.invoke("accounting/fields",o)}getCustomAccountingField(t){return this.invoke(`accounting/fields/${t}`)}updateCustomAccountingField(t,e,i){return JSON.stringify({reactivate:e,value:i}),this.invoke(`accounting/fields/${t}`)}deleteCustomAccountingField(t){return this.invoke(`accounting/fields/${t}`,{method:"DELETE"})}}].forEach(t=>{Object.getOwnPropertyNames(t.prototype).forEach(e=>{Object.defineProperty(r.prototype,e,Object.getOwnPropertyDescriptor(t.prototype,e)||Object.create(null))})});export{s as default};
